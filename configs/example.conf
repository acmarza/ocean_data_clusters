[default]

# location of your netCDF data file(s)
nc_files = /home/user/data1.nc,/home/user/data2.nc

# OPTIONAL: comma-separated variables that define a subset of the netCDF data for early processing. useful for datasets with many variables, or when some variables conflict across multiple files and prevent merging. remove this line if not needed.
vars_subset=dic,di14c,dc14,temp,salt,po4,o2

# whether to restrict the dataset to the ocean surface (level = 0)
surface_only = False

# OPTIONAL: an interval of timesteps [min, max] to restrict dataset to
timesteps_subset = [0, 100]

# variable long name of the clustering results (labels) for saving to netCDF
labels_long_name = "My example clustering results"
#
# variable long name of the two-step clustering results (sublabels) for saving to netCDF
sublabels_long_name = "My example subclustering results"

### 


[k-means]

# comma-separated list of variables to cluster based on
selected_vars = temp,salt,po4 

# number of clusters to split data into
n_clusters = 10 

# k-means hyperparameters, see scikit-learn docs on sklearn.cluster.KMeans
n_init = 10
max_iter = 300

# max number of clusters for which to evaluate clustering performance, starting with k = 2
max_clusters = 15 

# color palette for mapping out clusters
# see matplotlib docs for more options
palette = tab10
# palette = tab20
# palette = rainbow

###


[radiocarbon]

# the name of the Delta14Carbon variable as it appears in the dataset
dc14 = O_DC14
di14c = DI14C
dic = DIC

# mean lifetime of radiocarbon (default is based on Cambridge half-life)
mean_radiocarbon_lifetime = 8267

# atmospheric reservoir dc14
atm_dc14 = 0

###


[timeseries]

# whether to show a plot of all the timeseries combined (slow for big datasets)! 1 for yes, 0 for no
plot_all_ts = 1


###


[correlation]

# whether to mask grid points with statistically insignificant ( p > 0.05 ) correlation when plotting the correlation map
pvalues = 0

# files to save correlation results matrix to, if using pvalues
corr_mat_file = corr_mat.npy
pval_mat_file = pval_mat.npy
